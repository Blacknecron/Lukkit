package nz.co.jammehcow.lukkit.pluginwizard;

import nz.co.jammehcow.lukkit.Main;
import org.bukkit.ChatColor;
import org.bukkit.command.CommandSender;
import org.bukkit.configuration.file.YamlConfiguration;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class PluginWizard implements Runnable {
    public enum Step {
        ENTRY,
        NAME,
        VERSION,
        AUTHOR,
        DESC,
        EXIT, // terminate loop, create (or error) and cleanup. Not used in currentStep member
        REPEAT // Used to repeat the current action if the input was invalid. Also no used in current step member
    }

    private static final String nameRegex = "/^([0-9]|[a-z]|[A-Z])([0-9]|[a-z]|[A-Z]|-|_)+$/g";

    final Main plugin;
    private final CommandSender sender;
    private final WizardChatHandler chatHandler;
    private final PluginTemplate template = new PluginTemplate();
    private Step currentStep = Step.ENTRY;

    public PluginWizard(Main plugin, CommandSender sender) {
        this.plugin = plugin;
        this.sender = sender;
        this.chatHandler = new WizardChatHandler(this, this.sender);
    }

    @Override
    public void run() {
        this.chatHandler.setup();

        while (true) {
            Step step = executeNextStep();

            if (step == Step.EXIT) {
                // Break loop, progress to writing
                break;
            } else if (step != Step.REPEAT) {
                // Progress step variable
                this.currentStep = step;
            }
        }

        this.printBreak();
        this.showPluginSummary();
        this.sender.sendMessage("\n\n");

        this.sender.sendMessage(ChatColor.YELLOW + "Are you happy with the plugin? Last chance to scrap it before writing to disk.");

        while (!this.template.isFinalized()) {
            this.sender.sendMessage(ChatColor.BLUE + "Yes or no? (y/n)");

            String input = this.chatHandler.getInput();

            if (input.equalsIgnoreCase("y")) {
                this.template.setFinalized();
                this.finalizePlugin();
                this.sender.sendMessage(ChatColor.GREEN + "Written plugin to disk!");
            } else if (input.equalsIgnoreCase("n")) {
                this.template.setFinalized();
                this.sender.sendMessage(ChatColor.YELLOW + "You can do /lukkit dev new-plugin any time to go through this again.");
                this.sender.sendMessage(ChatColor.YELLOW + "Exiting.");
            } else {
                this.sender.sendMessage(ChatColor.RED + "" + ChatColor.BOLD + "It's yes or no; try either y or n");
            }
        }

        this.sender.sendMessage(ChatColor.GREEN + "Thanks for using the Lukkit plugin wizard. Have a nice day!");

        this.cleanup();
    }

    @WizardStep(value = Step.ENTRY, firstRunOutput = "")
    private synchronized Step entry() {
        this.sender.sendMessage(ChatColor.GREEN + "Welcome to the Lukkit Plugin Wizard!");
        this.sender.sendMessage(ChatColor.GREEN + "You'll be asked a few questions and a plugin will be generated by the end.");
        return Step.NAME;
    }

    @WizardStep(value = Step.NAME, firstRunOutput = "First off let's get a plugin name sorted")
    private synchronized Step name() {
        this.sender.sendMessage(ChatColor.GREEN + "Naming your plugin:");
        this.sender.sendMessage(ChatColor.YELLOW + "Legal names are [a-z], [A-Z], [0-9], hypens (-) and underscores (_).");
        this.sender.sendMessage(ChatColor.YELLOW + "It also must start with an uppercase or lowercase letter. Makes the name tidier.");
        this.sender.sendMessage(ChatColor.BLUE + "Enter a name:");

        String tempName = this.chatHandler.getInput();

        if (!tempName.matches(nameRegex)) {
            this.sender.sendMessage(ChatColor.RED + "Invalid name, let's try that again...");
            return Step.REPEAT;
        }

        this.sender.sendMessage(ChatColor.GREEN + "Cool, that's this one done.");

        return Step.AUTHOR;
    }

    @WizardStep(value = Step.AUTHOR, firstRunOutput = "Now we'll move on to an author name.")
    private synchronized Step author() {
        this.sender.sendMessage(ChatColor.YELLOW + "To set the name to your own, just type a backslash (\\).");
        this.sender.sendMessage(ChatColor.BLUE + "Enter the plugin author:");

        String senderName = this.sender.getName();
        String author = this.chatHandler.getInput();
        this.template.author = author.equals("\\") ? senderName : author;

        this.sender.sendMessage(ChatColor.GREEN + "Set the author to " + senderName);

        return Step.DESC;
    }

    @WizardStep(value = Step.DESC, firstRunOutput = "Next up is a description!")
    private synchronized Step description() {
        this.sender.sendMessage(ChatColor.YELLOW + "If you want to write this over multiple lines, add a backslash (\\) at the end of the line.");
        this.sender.sendMessage(ChatColor.YELLOW + "If you don't want to write anything at all, do a single backslash.");
        this.sender.sendMessage(ChatColor.BLUE + "Enter a description:");

        StringBuilder description = new StringBuilder();
        do {
            description.append(this.chatHandler.getInput());
        } while (description.toString().endsWith("\\"));

        String finalDesc;
        if (description.toString().equalsIgnoreCase("\\")) {
            finalDesc = null;
        } else {
            finalDesc = description.toString().replace("\\", "\n");
        }

        // TODO: add null check
        this.template.description = finalDesc;

        this.sender.sendMessage(ChatColor.GREEN + "Cool, the description is done.");

        return Step.VERSION;
    }

    @WizardStep(value = Step.VERSION, firstRunOutput = "Your version should look something like 1.0.0, but you can do whatever really. Don't go too crazy.")
    private synchronized Step version() {
        this.sender.sendMessage(ChatColor.BLUE + "Input your version:");
        this.template.version = this.chatHandler.getInput();

        return Step.EXIT;
    }

    private Step executeNextStep() {
        Method[] methods = this.getClass().getDeclaredMethods();
        Method finalMethod = null;

        for (Method m : methods) {
            if (m.isAnnotationPresent(WizardStep.class) && m.getAnnotation(WizardStep.class).value() == this.currentStep) {
                finalMethod = m;
                break;
            }
        }

        if (finalMethod != null) {
            try {
                // Space out the steps in chat
                this.printBreak();

                // Get a first time only message and send it if it's the first time
                String preMessage = finalMethod.getAnnotation(WizardStep.class).firstRunOutput();
                if (!preMessage.isEmpty()) this.sender.sendMessage(ChatColor.GREEN + preMessage);

                //noinspection ConfusingArgumentToVarargsMethod
                return (Step) finalMethod.invoke(this, null);
            } catch (IllegalAccessException | InvocationTargetException e) {
                Main.instance.getLogger().severe(e.getLocalizedMessage());
            }
        }

        // TODO: null or error
        Main.instance.getLogger().severe("Could not run method for Step " + this.currentStep.toString());
        cleanup();
        return Step.EXIT;
    }

    private void printBreak() {
        this.sender.sendMessage(ChatColor.DARK_PURPLE + "" + ChatColor.BOLD + "\n--------------------------------\n" + ChatColor.RESET);
    }

    private void finalizePlugin() {
        File baseDir = new File(
                this.plugin.getDataFolder().getParent() + File.separator +
                        this.template.name + ".lkt" + File.separator
        );

        //noinspection ResultOfMethodCallIgnored
        baseDir.mkdir();

        File mainFile = new File(baseDir, "main.lua");
        try {
            //noinspection ResultOfMethodCallIgnored
            mainFile.createNewFile();
        } catch (IOException e) {
            // TODO
            e.printStackTrace();
        }

        String apiVersion = this.plugin.getServer().getBukkitVersion();
        // Format version
        apiVersion = apiVersion.split("-")[0];

        File pluginYML = new File(baseDir, "plugin.yml");
        YamlConfiguration config = new YamlConfiguration();
        config.set("main", "main.lua");
        config.set("name", this.template.name);
        config.set("author", this.template.author);
        config.set("version", this.template.version);
        config.set("description", this.template.version);
        config.set("api-version", apiVersion);

        try {
            config.save(pluginYML);
        } catch (IOException e) {
            // TODO
            e.printStackTrace();
        }
    }

    private void showPluginSummary() {
        this.sender.sendMessage(ChatColor.GREEN  + "Here's a quick summary of your plugin:");
        this.sender.sendMessage(ChatColor.YELLOW + "Name: "        + this.template.name);
        this.sender.sendMessage(ChatColor.YELLOW + "Author: "      + this.template.author);
        this.sender.sendMessage(ChatColor.YELLOW + "Version: "     + this.template.version);
        this.sender.sendMessage(ChatColor.YELLOW + "Description: " + this.template.description);
    }

    public void cleanup() {
        this.sender.sendMessage(ChatColor.YELLOW + "Quitting Lukkit plugin wizard...");
        this.chatHandler.cleanup();
        Main.instance.removeWizard(this);
    }
}
